#Set up travis CI

#pre installation on local machine
gem install travis
#need to log onto travis ci website
travis login


#generate ssh keys in local repo:
touch .travis.yml
ssh-keygen -t rsa -N "" -C "travis@datasf-explorer.tk" -f travis_rsa
travis encrypt-file travis_rsa --add
rm travis_rsa
cat travis_rsa.pub   << copy this for later

#Setup Travis on the droplet
#Create a passwordless travis user on the droplet,
#setup the generated access key, and
#give it access to the folder where the website is hosted:
sudo adduser --disabled-password --gecos "" travis
sudo chown -R travis:travis /var/www/planecq.com
sudo su travis
mkdir ~/.ssh
chmod 700 .ssh
emacs .ssh/authorized_keys
"copy content of previous cat, save, exit"
chmod 600 .ssh/authorized_keys

#Setting up a remote repo:
#Remote is just a repository on our web server to which we can push.
#We’ll want to push to a repository in /var/kjaermaxi.me/.git, and have the files available in /var/kjaermaxi.me/public_html. We’re placing the .git one level above public_html because we don’t want to serve it.
#To do this, we’ll start out by creating an empty Git repo in /var/www/open-data-explorer/public_html

To do this, we’ll start out by creating an empty Git repo in /var/www/open-data-explorer/public_html:

mkdir /var/www/open-data-explorer/public_html
mkdir /var/www/open-data-explorer/public_html/.git
cd .git
git init --bare
#That’s all it really takes to have a remote that we can push to! But our repository is in /var/www/kjaermaxi.me, and we want to have the pushed files in /var/www/kjaermaxi.me/public_html. To achieve this, we can add what’s called a post-receive hook, which is a list of commands to run once the remote has received a push.

cd hooks
vim post-receive
#Then, you’ll need to type the following in:

#!/bin/sh
git --work-tree=/var/www/open-data-explorer/public_html/ --git-dir=/var/www/open-data-explorer/public_html/.git checkout -f
